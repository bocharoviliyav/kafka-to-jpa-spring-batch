
server:
  port: ${PORT:10000}

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/testdb
    username: postgres
    password: postgres
  kafka:
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringSerializer
      value-deserializer: org.apache.kafka.common.serialization.StringSerializer
      group-id: ${KAFKA_CONSUMER_GROUP:spring-batch-group}
      properties:
        jaas.enabled: true
        security.protocol: PLAINTEXT
        sasl.mechanism: SCRAM-SHA-512
        sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USERNAME}" password="${KAFKA_PASSWORD}";
    bootstrap-servers: localhost:29092
    admin:
      ssl:
        protocol: SA

  main:
    allow-bean-definition-overriding: true
  application:
    name: kafka-to-jpa-spring-batch
  jackson:
    default-property-inclusion: always
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false

management:
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  server:
    add-application-context-header: true
    port: ${PORT:10000}
  endpoint:
    metrics:
      enabled: false
    prometheus:
      enabled: true
  endpoints:
    web:
      base-path: "/"
      exposure:
        include: "*"
      path-mapping:
        health: actuator/health
        info: actuator/info
        prometheus: metrics

logbook:
  exclude:
    - /actuator/health
    - /actuator/health/**
    - /admin/**
    - /webjars/**
    - /metrics
  obfuscate:
    headers:
      - Authorization
      - X-Secret
    parameters:
      - access_token
      - password
  format:
    style: json
  strategy: body-only-if-status-at-least
  minimum-status: ${MINIMUM_STATUS_LOG_BODY:400}

logging:
  level:
    ROOT: INFO
    org.zalando.logbook.Logbook: TRACE
  pattern:
    console: "${spring.application.name} %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([-,%X{traceId:-},%X{spanId:-}]){blue}[%thread] %clr(%-5level) %clr(%logger{36}){magenta} - %msg%n"
